------------------------------------------------
moze to nie ma sensu bo ... 

- kolekcje, string, ... nie implementuje interfejsu 'Seq[T]'
-- slides.Values(itemsSlice), slices.Collect(itemsSeq) 

- nie ma wnioskowania typow dla lambd
-- ilosc kodu dla petli for+if jest "identyczna" z wykonaniem "filter 
-- items.filter( x => x > 10) vs items.filter( (x: int) :int => { return x + 1; })

- tylko funkcje moge byc generyczne, metody nie moga
-- (nie ma_ wygodnego sposoby wywolania wielu operatorow

- w go nie ma koncepcji "braku wartosci" (Option<T>)

- operatory musza byc naturalne czyli "idiomatyczne" dla stylu programowania w go


------------------------------------------------
... ALE powerseqseq ma sens

- ciekawe wyzdanie zaprojektowac API tak aby bylo "naturalne" dla jezyka Go pomimo ogranczen jezyka

- mozna sobie testowo "opublikowac biblioteke" w go

- gdy osoby lubia programowac funkcyjne (ja w go "nie lubie" :))

- czasami jedna jest irytujece jak trzeba pisc kolejny raz pojedyncze wywolanie  np Find, All, Any, ... 

- gdy ktos chce po prostu wykonac jeden operator przekazujca slice a nie Seq[T]
- gdy operatory sa bardziej ciekawe jak: pairwise, expand, combinations, interleave, interpose

- same iteratory pojawily sie dopiero w 2024, generyki w 2022, a go pojawil sie w 2009, moze bedzie to badziej popularne
- generalnie "iterator" ma sens, nawet piszac zadania aoc uzywalem iteratorow/generatorow gdzie to miala sens

------------------------------------------------
... go jest fajny bo

- super oficjalna integracja z vs code (google robi dodatek), formatter, fixer, linter, testy jednostkowe, ... wszystko "in the box"
- bardzo prosty jezyk programowania promujacy: programowania proceduralne/funkcyjne "functions over data"
- bardzo szybka kompilacja i wykonanie
- prostota budownia modulow z pakietami/pakietow, zwykle pliki na dysku




------------------------------------------------

+range
+entries
defer
empty
generate
repeatvalue
throww


+zip
+concat
+join

+ max, maxby, min, minby - slices.Min/MinFunc/Max/MaxFunc
+ average
+ sum

+count
+ countby

+foreach - "subscribe"
oftype
cast
defaultifempty
doo
ignoreelements

isempty
memoize


+distinct
+distinctby
+distinctuntilchanged

+union
+unionby
+intersect
+intersectby
+except
+exceptby


+buffer
+pairwise
partitionby
share
expand
combinations
interleave
interpose

+map
+filter
+flatmap
filtermap
flat

+find
+findindex
includes - includes
single
last
elementat


+groupby
-groupbytoobject
-groupbytotransformedobject
groupjoin


-orderby
-orderbydescending
-thenby
-thenbydescending

+reduce
+scan

+repeat
-reverse
+sequenceequal


+every
+some


+skip
+take
+takewhile
+skipwhile
skiplast
takelast


+toarray
+tomap
-toobject








----------------------------------------------------------------------------------------------------


- warto miec pomocnicze funcje dzialajace na generatorach jak Range, Concat, ...
- ale na pewno nie ma sensu 100% operatorow przepisywac
- warto stosowac nazewnictwo i konwencje jak 'BlaFunc' z go
- niektore metody jak skip i take mozna robic bezpsrednio na slice s[0:10] lub s[10:]

----------------------------------------------------------------------------------------------------

// uwagi
// - warto pamietac ze pakiet wbudowany "slices." posiada juz kilka funkcji, aby zbednie konwertowac na Seq i powerseq
// - niby fajnie byloby pisac fluent interface jak ....Filter().Map() ale w go metody (funkcje zdefiniowane dla typow) nie moga byc generyczne wiec np
// funkcje Filter da sie napisac bo ma tylko jeden T, ale juz Map nie da sie napisac bo map T i R
// - z powyzszego powodu operatory piszemy jako zwykle funkcje, a nie metody, wtedy tez wygodnie kazdy moze dopisac swoj dodatkowy
// - z jednej strony chcemy moc wywolywac pojedyncze operatory, ale drugiej strony caly plus powerseq to mozliwosc wykorzystania kilku operatorow oraz ich leniwosci,
// kiedy zdecydujemy sie na prowadzenia Pipe(..., s => seq.Filter(s, ...) , s => ...) do skladania zapytania to pojawia sie wielka niewygoda polegajca na tym
// ze dla metod anonimowych zawsze i tak musimy pisac typy i kodu zaczyna sie pisac bardz duzo :( wiec tutaj moze operatory sa currowane wiec kod wyglada tak
// Pipe(..., seq.Filter(...), seq.Map(...))
// - gdy zdecydujemy sie na pisanie "curried funkcje" to pojaw sie niewygoda z pisania np takiego Take[string](10)(names) poniewaz tutaj inferencja typow nie dziala,
// trzeba jawnie podawac typ elementu w Seq[], wynika to z tego ze sama Take jest generyczna
// - nawet jak wprowadzilem sobie pomocnicze typu Operator, OperatorTR, ... to potem nie wszedzie mozna z nich skorzystac, albo sie nie znam albo po prostu go
// ma ograniczenia np .Find zwraca jakby "tuple" ale tuple to chyba nie jest typ danych a po prostu mozliwosc zwracania wielu rezultatu, takze .Concat przyjmowal
// zmienna ilosc argumentow zapisanych jako ...iter.Seq[T] i tam takze nie moglem zastosowac Operator[...,...]

// przyklad jak pisac wlasny modul ktory ma wiele pakierow
// - https://github.com/stretchr/testify, https://github.com/davecgh/go-spew
// - https://cgarciarosales97.medium.com/how-to-create-and-publish-packages-in-go-37482acfb4ab
// - https://softchris.github.io/golang-book/03-projects/03-create-shared-module/

// odpowiednik powerseq
// - https://github.com/ledongthuc/goterators tylko to dziala na slices i nie ma Pipe
// - https://serge-hulne.medium.com/iterators-map-filter-reduce-and-list-processing-in-go-golang-implementing-python-functional-2d24d780051f
// tutaj wykorzystuja channel do implemtacji operatorow :)
// -- https://github.com/serge-hulne/go_iter


